plugins {
    id 'org.jetbrains.kotlin.jvm' version "1.3.50" apply false
    id 'org.springframework.boot' version '2.2.1.RELEASE' apply false
    id 'io.spring.dependency-management' version '1.0.8.RELEASE' apply false
}

allprojects {
    apply plugin: 'idea'
    idea {
        module {
            outputDir file('build/classes/main')
            testOutputDir file('build/classes/test')
        }
    }
}

subprojects {
    repositories {
        jcenter()
        mavenCentral()
        mavenLocal()
    }
    apply plugin: 'java'
    apply plugin: 'java-library'
    apply plugin: 'kotlin'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'
    apply plugin: 'maven-publish'
    apply plugin: 'signing'

    group 'dev.niubi.commons'
    version '0.5'
    sourceCompatibility = '1.8'
    java {
        registerFeature('optional') {
            usingSourceSet(sourceSets.main)
        }
        withJavadocJar()
        withSourcesJar()
    }
    dependencies {
        optionalImplementation("org.jetbrains.kotlin:kotlin-stdlib-jdk8")
        optionalImplementation("org.jetbrains.kotlin:kotlin-stdlib")
        optionalImplementation("org.jetbrains.kotlin:kotlin-reflect")
        annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
        compileOnly 'org.springframework.boot:spring-boot-configuration-processor'

        compileOnly 'org.projectlombok:lombok'
        annotationProcessor 'org.projectlombok:lombok'

        testImplementation "junit:junit:4.12"
        testImplementation "org.springframework.boot:spring-boot-starter-test"
    }
    compileKotlin {
        kotlinOptions {
            freeCompilerArgs = ['-Xjsr305=strict', '-Xjvm-default=enable']
            jvmTarget = '1.8'
        }
        incremental = true
    }
    compileTestKotlin {
        kotlinOptions {
            freeCompilerArgs = ['-Xjsr305=strict', '-Xjvm-default=enable']
            jvmTarget = '1.8'
        }
    }
    compileJava {
        dependsOn(processResources)
        options.incremental = true
        options.encoding = 'UTF-8'
        options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
    }

//    task sourcesJar(type: Jar) {
//        from sourceSets.main.allSource
//        archiveClassifier.set('sources')
//    }
//    task javadocJar(type: Jar) {
//        from javadoc
//        archiveClassifier.set('javadoc')
//    }
    bootJar.configure {
        enabled = false
    }
    jar {
        enabled = true
    }
    javadoc {
        failOnError false
        options.addStringOption('Xdoclint:none', '-quiet')
        options.addStringOption('encoding', 'UTF-8')
        options.addStringOption('charSet', 'UTF-8')
    }
//    afterEvaluate {
//        tasks.withType(PublishToMavenRepository) { task ->
//            if (task.publication.hasProperty('repo') && task.publication.repo != task.repository.name) {
//                task.enabled = false
//                task.group = null
//            }
//        }
//    }
}